version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: conference_postgres
    environment:
      POSTGRES_DB: conference_booking
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - conference_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: conference_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    ports:
      - "5672:5672"    # AMQP port
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - conference_network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  # Symfony Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: conference_backend
    environment:
      APP_ENV: dev
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/conference_booking?serverVersion=15&charset=utf8
      MESSENGER_TRANSPORT_DSN: amqp://admin:admin@rabbitmq:5672/%2f/messages
      RABBITMQ_URL: amqp://admin:admin@rabbitmq:5672/
      CORS_ALLOW_ORIGIN: http://localhost:3000
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/var/www/html
      - backend_vendor:/var/www/html/vendor
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - conference_network
    command: ["php", "-S", "0.0.0.0:8000", "-t", "public"]

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: conference_frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NODE_ENV: development
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    depends_on:
      - backend
    networks:
      - conference_network
    command: ["npm", "run", "dev"]

volumes:
  postgres_data:
    driver: local
  rabbitmq_data:
    driver: local
  backend_vendor:
    driver: local
  frontend_node_modules:
    driver: local

networks:
  conference_network:
    driver: bridge
